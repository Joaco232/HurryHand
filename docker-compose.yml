version: '3.8'

services:
  # Backend Spring Boot
  backend:
    build: ./backend
    container_name: hurryhand-backend
    ports:
      - "8080:8080"
    depends_on:
      - minio
    environment:
      # Configuración para que el backend se conecte a MinIO
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    networks:
      - hurryhand-network
    restart: unless-stopped

  # MinIO File Storage
  minio:
    image: minio/minio:latest
    container_name: hurryhand-minio
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console Web
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - hurryhand-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO Client para crear bucket automáticamente
  minio-setup:
    image: minio/mc:latest
    container_name: hurryhand-minio-setup
    depends_on:
      - minio
    networks:
      - hurryhand-network
    entrypoint: >
      /bin/sh -c "
      echo 'Esperando a que MinIO esté listo...';
      until /usr/bin/mc config host add myminio http://minio:9000 minioadmin minioadmin; do
        echo 'MinIO no está listo, esperando...';
        sleep 2;
      done;
      echo 'MinIO está listo, creando bucket...';
      /usr/bin/mc mb myminio/user-photos --ignore-existing;
      /usr/bin/mc policy set public myminio/user-photos;
      echo 'Bucket user-photos creado y configurado como público';
      exit 0;
      "

# Volúmenes persistentes
volumes:
  minio_data:
    driver: local

# Red interna para comunicación entre servicios
networks:
  hurryhand-network:
    driver: bridge